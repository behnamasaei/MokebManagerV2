@page "/AdminPanel/Pilgrim/New"
@using Microsoft.AspNetCore.Mvc.Localization
@using MokebManagerV2.Localization
@inject IHtmlLocalizer<MokebManagerV2Resource> Localizer
@model MokebManagerV2.Web.Pages.Pilgrim.NewModel
@{
}

@section Styles {
	<link type="text/css" rel="stylesheet" href="~/libs/majidh1/jalalidatepicker/dist/jalalidatepicker.min.css" />
}

@section Scripts {
	<partial name="_ValidationScriptsPartial" />
	<script src="~/libs/html5-qrcode/html5-qrcode.min.js/html5-qrcode.min.js" type="text/javascript"></script>
	<script src="~/libs/jalaali-js/jalaali.min.js" type="text/javascript"></script>

	@* Document jalali datepicker: https://github.com/majidh1/JalaliDatePicker *@
	<script type="text/javascript" src="~/libs/majidh1/jalalidatepicker/dist/jalalidatepicker.min.js"></script>
	<script>
		jalaliDatepicker.startWatch();


		function changeForceExitDate(event){
			const entryDateJalali = document.getElementById('entryDateInput').value;
			const [datePart, timePart] = entryDateJalali.split(" ");
			const [entryjy, entryjm, entryjd] = datePart.split("/").map(Number);

			const forceExitDateJalali = document.getElementById('forceExitDateInput').value;
			const [exitDatePart, ExittimePart] = forceExitDateJalali.split(" ");
			const [eixtjy, eixtjm, eixtjd] = exitDatePart.split("/").map(Number);

			const entryDate = jalaali.jalaaliToDateObject(entryjy,entryjm,entryjd);
			const forceExitDate = jalaali.jalaaliToDateObject(eixtjy, eixtjm, eixtjd);



			if (forceExitDate <= entryDate) {
				alert("تاریخ خروج اجباری نمی تواند قبل از تاریخ ورود باشد.");
				document.getElementById('forceExitDateInput').value = "";
				return;
			}
			const diffTime = Math.abs(forceExitDate - entryDate);
			// تبدیل به روز
			const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
			document.getElementById('spanDuration').innerHTML = "مدت اقامت: "+diffDays+" روز";
		}

		

		function changeMokeb(event){
			const selectedOption = event.options[event.selectedIndex];


			const sex = selectedOption.getAttribute("sex");
			const sexInput = document.getElementById('sexInput');
			if (sexInput) {
				sexInput.value = sex || "";
			}

			fetch('/pilgrim/new?handler=MokebData&id=' + event.value)
				.then(response => {
					if (!response.ok) throw new Error("Network error");
					return response.json();
				})
				.then(mokeb => {
					console.log(mokeb);
					document.getElementById('forceExitDateInput').value = mokeb.forceExitDate;
					document.getElementById('freeCapacityLbl').innerHTML =" ظرفیت باقی مانده:"+  mokeb.freeCapacity;
					changeForceExitDate();
				})
				.catch(err => console.error("Error fetching mokeb:", err));
		}
	</script>
	<script>
				// -- Configurable params --
		const MIN_FPS = 2;
		const MAX_FPS = 15;
		const QRBOX_SIZE = 250;
		const DEBOUNCE_MS = 2000;

		// -- State for debouncing & fps control --
		let lastDecoded = null;
		let lastDecodeTime = 0;
		let currentFps = MAX_FPS;

		// -- Initialize low-level scanner --
		const html5Qr = new Html5Qrcode(/* element id = */ "reader");

		// -- Success handler with debounce & fps adjust --
		async function onSuccess(decodedText, decodedResult) {
		  const now = Date.now();

		  // Debounce repeated scans
		  if (decodedText === lastDecoded && (now - lastDecodeTime) < DEBOUNCE_MS) {
			return;
		  }
		  lastDecoded = decodedText;
		  lastDecodeTime = now;
		const input = document.getElementById('barcodInput');
		if (!input) {
		  console.error('barcodInput not found in DOM');
		  return;
		}
		input.value = decodedText;
		  console.log(`✔️ Scanned: ${decodedText}`, decodedResult);

		  // If you only want one scan, stop here:
		  // await html5Qr.stop();

		  // Otherwise, you might lower fps for a bit if idle
		  currentFps = MIN_FPS;
		  await html5Qr.clear(); // clear overlays
		  setTimeout(() => startScanning(), 1000); // bump fps back up after 1 s
		}

		// -- Failure handler (ignore most errors) --
		function onFailure(error) {
		  // Only warn on serious errors
		  if (error.name !== Html5QrcodeErrorTypes.NO_CODE_FOUND) {
			console.warn(`Scan error: ${error}`);
		  }
		}

		// -- Start (or restart) scanning with current FPS & box --
		function startScanning() {
		  html5Qr.start(
			{ facingMode: "environment" },            // camera config
			{ fps: currentFps, qrbox: QRBOX_SIZE },   // scan config
			onSuccess,
			onFailure
		  ).catch(err => {
			console.error("Failed to start scanner:", err);
		  });
		}

		// -- Kick things off --
		startScanning();

	</script>
}

<div class="mb-5" id="reader" width="600px"></div>

<form method="post">
	<div class="row gx-5 gy-3 mb-5">

		<div class="col-12 col-md-6">
			<label asp-for="Input.Barcode" class="form-label"></label>
			<input asp-for="Input.Barcode" type="text" class="form-control" id="barcodInput" />
			<span asp-validation-for="Input.Barcode" class="text-danger"></span>
		</div>

		<div class="col-12 col-md-6">
			<label asp-for="Input.PassportNo" class="form-label"></label>
			<input asp-for="Input.PassportNo" class="form-control">
			<span asp-validation-for="Input.PassportNo" class="text-danger"></span>
		</div>

		<div class="col-12 col-md-6">
			<label asp-for="Input.MokebId" class="form-label"></label>
			<select asp-for="Input.MokebId" class="form-select" onchange="changeMokeb(this)">
				<option value="">@Localizer["Select"]</option>
				@foreach (var item in Model.Mokebs)
				{
					<option sex="@item.Sex" value="@item.Id">@item.Name</option>
				}
			</select>
			<span asp-validation-for="Input.MokebId" class="text-danger"></span>
			<span class="text-secondary" id="freeCapacityLbl"></span>
		</div>

		<div class="col-12 col-md-6">
			<label asp-for="Input.Sex" class="form-label"></label>
			<select asp-for="Input.Sex" class="form-select" id="sexInput">
				<option value="">@Localizer["Select"]</option>
				<option value="Male">@Localizer["Male"]</option>
				<option value="Female">@Localizer["Female"]</option>
			</select>
			<span asp-validation-for="Input.Sex" class="text-danger"></span>
		</div>

		<div class="col-12 col-md-6">
			<label asp-for="Input.EntryDate" class="form-label"></label>
			<input disabled data-jdp type="text" asp-for="Input.EntryDate" class="form-control" style="direction:ltr" id="entryDateInput">
			<span asp-validation-for="Input.EntryDate" class="text-danger"></span>
		</div>

		<div class="col-12 col-md-6">
			<label asp-for="Input.ForceExitDate" class="form-label"></label>
			<input data-jdp type="text" asp-for="Input.ForceExitDate" class="form-control" onchange="changeForceExitDate()" id="forceExitDateInput" style="direction:ltr">
			<span asp-validation-for="Input.ForceExitDate" class="text-danger"></span>
			<span class="text-secondary" id="spanDuration"></span>
		</div>


		<div class="col-12 col-md-6">
			<label asp-for="Input.BedNumber" class="form-label"></label>
			<input asp-for="Input.BedNumber" class="form-control">
			<span asp-validation-for="Input.BedNumber" class="text-danger"></span>
		</div>


		<div class="col-12 col-md-6">
			<label asp-for="Input.FullName" class="form-label"></label>
			<input asp-for="Input.FullName" type="text" class="form-control">
			<span asp-validation-for="Input.FullName" class="text-danger"></span>
		</div>

		<div class="col-12 col-md-6">
			<label asp-for="Input.PhoneNumber" class="form-label"></label>
			<input asp-for="Input.PhoneNumber" class="form-control">
			<span asp-validation-for="Input.PhoneNumber" class="text-danger"></span>
		</div>

		<div class="col-12 col-md-6">
			<label asp-for="Input.NationalCode" class="form-label"></label>
			<input asp-for="Input.NationalCode" class="form-control">
			<span asp-validation-for="Input.NationalCode" class="text-danger"></span>
		</div>


		<input type="hidden" asp-for="Input.TenantId" />
	</div>
	<button type="submit" class="btn btn-primary">ذخیره</button>
</form>

