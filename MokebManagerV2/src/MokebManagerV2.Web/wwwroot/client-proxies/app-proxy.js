/* This file is automatically generated by ABP framework to use MVC Controllers from javascript. */


// module app

(function(){

  // controller mokebManagerV2.services.bed

  (function(){

    abp.utils.createNamespace(window, 'mokebManagerV2.services.bed');

    mokebManagerV2.services.bed.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/bed',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    mokebManagerV2.services.bed.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/bed/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    mokebManagerV2.services.bed['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/bed/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    mokebManagerV2.services.bed.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/bed/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    mokebManagerV2.services.bed.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/bed' + abp.utils.buildQueryString([{ name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller mokebManagerV2.services.mokeb

  (function(){

    abp.utils.createNamespace(window, 'mokebManagerV2.services.mokeb');

    mokebManagerV2.services.mokeb.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/mokeb',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    mokebManagerV2.services.mokeb.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/mokeb/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    mokebManagerV2.services.mokeb.withDetails = function(propertySelectors, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/mokeb/with-details',
        type: 'POST',
        data: JSON.stringify(propertySelectors)
      }, ajaxParams));
    };

    mokebManagerV2.services.mokeb['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/mokeb/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    mokebManagerV2.services.mokeb.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/mokeb/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    mokebManagerV2.services.mokeb.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/mokeb' + abp.utils.buildQueryString([{ name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller mokebManagerV2.services.pilgrim

  (function(){

    abp.utils.createNamespace(window, 'mokebManagerV2.services.pilgrim');

    mokebManagerV2.services.pilgrim.createAsyncByInputAndForceCreate = function(input, forceCreate, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/pilgrim' + abp.utils.buildQueryString([{ name: 'forceCreate', value: forceCreate }]) + '',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    mokebManagerV2.services.pilgrim.getListWithDetail = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/pilgrim/with-detail' + abp.utils.buildQueryString([{ name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    mokebManagerV2.services.pilgrim.discharge = function(passportOrBarcode, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/pilgrim/discharge' + abp.utils.buildQueryString([{ name: 'passportOrBarcode', value: passportOrBarcode }]) + '',
        type: 'POST',
        dataType: null
      }, ajaxParams));
    };

    mokebManagerV2.services.pilgrim.getAllFromMokeb = function(mokebId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/pilgrim/from-mokeb/' + mokebId + '',
        type: 'GET'
      }, ajaxParams));
    };

    mokebManagerV2.services.pilgrim.checkTracking = function(passportOrBarcode, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/pilgrim/check-tracking' + abp.utils.buildQueryString([{ name: 'passportOrBarcode', value: passportOrBarcode }]) + '',
        type: 'POST'
      }, ajaxParams));
    };

    mokebManagerV2.services.pilgrim.createAsyncByInput = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/pilgrim',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    mokebManagerV2.services.pilgrim.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/pilgrim/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    mokebManagerV2.services.pilgrim['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/pilgrim/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    mokebManagerV2.services.pilgrim.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/pilgrim/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    mokebManagerV2.services.pilgrim.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/app/pilgrim' + abp.utils.buildQueryString([{ name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

  })();

})();


